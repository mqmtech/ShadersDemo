// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitKernel
#pragma kernel UpdateKernel

struct ParticleData
{
	float3 position;
	float4 color;
};

struct ParticlePhysicsData
{
	float3 velocity;
};

Texture2D<float4> _Image;
float4 _ParticlesSize;

RWStructuredBuffer<ParticleData> _VerticesBuffer;
AppendStructuredBuffer<ParticleData> _ParticlesBuffer;
AppendStructuredBuffer<ParticlePhysicsData> _ParticlesPhysicsBuffer;

float _Time;
float _DeltaTime;
float4 _Explosion;

RWStructuredBuffer<float4x4> _VP;
RWStructuredBuffer<float4x4> _I_VP;

float3 CalculatePositionById(uint3 id)
{
	return -float3(0.5, 0.5, 0) + float3(id.x, id.y, 0)*0.010;
}

int orient2D(float3 a, float3 b, float3 c)
{
    return (b.x-a.x)*(c.y-a.y) - (b.y-a.y)*(c.x-a.x);
}

[numthreads(256,1,1)]
void InitKernel (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= _ParticlesSize.x)
	{
		return;
	}
	
	/*float3 v0 = _VerticesBuffer[id.x*3   ].position;
	float3 v1 = _VerticesBuffer[id.x*3 +1].position;
	float3 v2 = _VerticesBuffer[id.x*3 +2].position;*/
	
	float4 v0 = mul(_VP[0], float4(_VerticesBuffer[id.x*3   ].position, 1));
	float4 v1 = mul(_VP[0], float4(_VerticesBuffer[id.x*3 +1].position, 1));
	float4 v2 = mul(_VP[0], float4(_VerticesBuffer[id.x*3 +2].position, 1));
		
	float4 pMin = min(min(v0, v1), v2);
	float4 pMax = max(max(v0, v1), v2);
	
	float2 subStep = (pMax-pMin)/5.0;
	float4 p = v0;
	for (int y = 0; y < 5; ++y) {
        for (int x = 0; x < 5; ++x) {
            
            p = pMin + float4(x*subStep.x, y*subStep.y, 0, 0);
            
            float dirToMin = length(p.xy-pMin.xy);
            float dirToMax = length(p.xy-pMax.xy);
            p.zw = (1-(dirToMin/(dirToMin+dirToMax)))*pMin.zw + (1-(dirToMax/(dirToMin+dirToMax)))*pMax.zw;
            
            int w0 = orient2D(v1, v2, p);
            int w1 = orient2D(v2, v0, p);
            int w2 = orient2D(v0, v1, p);

            // If p is on or inside all edges, render pixel.
            if (w0 >= 0 && w1 >= 0 && w2 >= 0)
            {
            	p = mul(_I_VP[0], p);
            	ParticleData vertex = (ParticleData) 0; vertex.position = p; _ParticlesBuffer.Append(vertex);
            }
        }
    }
	
	v0 = mul(_I_VP[0], v0);
	v1 = mul(_I_VP[0], v1);
	v2 = mul(_I_VP[0], v2);
    ParticleData vertex = (ParticleData) 0; vertex.position = v0.xyz; _ParticlesBuffer.Append(vertex);
    			 vertex = (ParticleData) 0; vertex.position = v1.xyz; _ParticlesBuffer.Append(vertex);
    			 vertex = (ParticleData) 0; vertex.position = v2.xyz; _ParticlesBuffer.Append(vertex);
	
	/*ParticlePhysicsData data; 
	data.velocity = float3(0,0,0);
	_ParticlesPhysicsBuffer.Append(data);*/
}

/*
[numthreads(256,1,1)]
void UpdateKernel (uint3 id : SV_DispatchThreadID)
{
	if(id.x > _ParticlesSize.x)
	{
		return;
	}
	
	int idx = _ParticlesSize.x * id.y + id.x;
	
	ParticlePhysicsData physicsData = _ParticlesPhysicsBuffer[idx];
	if(_Explosion.w > 0)
	{
		float2 dirToExplosion = -(_Explosion.xy - _ParticlesBuffer[idx].position.xy);
		float distToExplosion = length(dirToExplosion);
		
		float forceScale = smoothstep(0.25, 0, distToExplosion);
		dirToExplosion /= distToExplosion;
		physicsData.velocity.xy += dirToExplosion * (5 * forceScale) * (0.5+0.5*sin(idx));
	}
	
    _ParticlesBuffer[idx].position += physicsData.velocity * _DeltaTime;
    physicsData.velocity *= 0.9;
    
    if(length(physicsData.velocity.xz) < 1e-2)
    {
    	_ParticlesBuffer[idx].position = lerp(_ParticlesBuffer[idx].position, CalculatePositionById(id), 0.1);
    }
    
    _ParticlesPhysicsBuffer[idx] = physicsData;
}
*/